from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser  # ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser ‡πÅ‡∏ó‡∏ô auth.User

class CustomUserCreationForm(UserCreationForm):
    email = forms.EmailField(required=True, label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

    class Meta:
        model = CustomUser  # ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser ‡πÅ‡∏ó‡∏ô auth.User
        fields = ["username", "email", "password1", "password2"]

    def clean_email(self):
        email = self.cleaned_data.get("email")
        if CustomUser.objects.filter(email=email).exists():
            raise forms.ValidationError("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô")
        return email


class AddressForm(forms.Form):
    full_name = forms.CharField(label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", max_length=100, required=True)
    phone_number = forms.CharField(label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", max_length=15, required=True)
    address = forms.CharField(label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", widget=forms.Textarea(attrs={'rows': 3}), required=True)
    city = forms.CharField(label="‡πÄ‡∏°‡∏∑‡∏≠‡∏á", max_length=50, required=True)
    postal_code = forms.CharField(label="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå", max_length=10, required=True)
    country = forms.CharField(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", max_length=50, required=True)

    def clean_phone_number(self):
        phone_number = self.cleaned_data.get("phone_number")
        if not phone_number.isdigit():
            raise forms.ValidationError("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return phone_number

class PaymentForm(forms.Form):
    PAYMENT_CHOICES = [
        ('credit_card', 'üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'),
        ('paypal', 'üÖøÔ∏è PayPal'),
        ('bank_transfer', 'üè¶ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£'),
        ('cod', 'üí∞ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á')
    ]
    payment_method = forms.ChoiceField(label="‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", choices=PAYMENT_CHOICES, widget=forms.RadioSelect, required=True)
    
    card_number = forms.CharField(label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", max_length=16, required=False, min_length=16)
    expiry_date = forms.CharField(label="‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (MM/YY)", max_length=5, required=False)
    cvv = forms.CharField(label="CVV", max_length=4, required=False, min_length=3)

    def clean_card_number(self):
        card_number = self.cleaned_data.get("card_number")
        if card_number and (not card_number.isdigit() or len(card_number) != 16):
            raise forms.ValidationError("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 16 ‡∏´‡∏•‡∏±‡∏Å")
        return card_number

    def clean_cvv(self):
        cvv = self.cleaned_data.get("cvv")
        if cvv and (not cvv.isdigit() or len(cvv) not in [3, 4]):
            raise forms.ValidationError("CVV ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏£‡∏∑‡∏≠ 4 ‡∏´‡∏•‡∏±‡∏Å")
        return cvv

    def clean_expiry_date(self):
        expiry_date = self.cleaned_data.get("expiry_date")
        if expiry_date:
            import re
            if not re.match(r'^(0[1-9]|1[0-2])\/\d{2}$', expiry_date):
                raise forms.ValidationError("‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö MM/YY")
        return expiry_date

    def clean(self):
        cleaned_data = super().clean()
        payment_method = cleaned_data.get("payment_method")

        if payment_method == "credit_card":
            if not cleaned_data.get("card_number") or not cleaned_data.get("expiry_date") or not cleaned_data.get("cvv"):
                raise forms.ValidationError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")

        return cleaned_data

class CheckoutForm(forms.Form):
    full_name = forms.CharField(label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", max_length=100, required=True)
    email = forms.EmailField(label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•", required=True)
    address = forms.CharField(label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", widget=forms.Textarea(attrs={'rows': 3}), required=True)
    phone_number = forms.CharField(label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", max_length=15, required=True)
    note = forms.CharField(label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", widget=forms.Textarea(attrs={'rows': 2}), required=False)

    payment_method = forms.ChoiceField(
        label="‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        choices=[
            ("credit_card", "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"),
            ("paypal", "PayPal"),
            ("bank_transfer", "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"),
            ("cod", "‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"),
        ],
        widget=forms.RadioSelect,
        required=True,
    )
